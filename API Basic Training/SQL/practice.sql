CREATE TABLE STUDENT(
                    ENRNO NUMBER(3) PRIMARY KEY,
                    NAME VARCHAR2(30) NOT NULL,
                    CITY VARCHAR2(30) DEFAULT 'RAJKOT',
                    MOBILE NUMBER (10) UNIQUE
;
INSERT INTO STUDENT VALUES(101,'HAPPY','RAJKOT',6848383232)
;
INSERT INTO STUDENT VALUES(102,'RICHA','SURAT',6848383224)
;
INSERT INTO STUDENT VALUES(103,'HAPPY',DEFAULT,6847783232)
;
INSERT INTO STUDENT (ENRNO,NAME,MOBILE) VALUES(104,'HAPPY',6668383232)
;
INSERT INTO STUDENT VALUES(105,'DHARA','RAJKOT',848383232)
;
SELECT * FROM STUDENT;

--CONSTRAINT
SELECT*FROM CUSTOMER;
CREATE TABLE CUSTOMER(
	CUST_NO VARCHAR2(4) PRIMARY KEY
	CONSTRAINT CUST_CHK_CUST_NO CHECK (CUST_NO LIKE 'C___'),
	C_NAME VARCHAR2(30) NOT NULL
	CONSTRAINT CUST_CHK_C_NAME CHECK (SUBSTR(C_NAME,1) BETWEEN 'D' AND 'S'),
	EMAIL_ID VARCHAR2 (30) UNIQUE
	CONSTRAINT CUST_CHK_EMAIL_ID CHECK (EMAIL_ID LIKE '___%@__%.___%'),
	CITY VARCHAR2(6)
	CONSTRAINT CUST_CHK__CITY CHECK (UPPER(CITY)IN('RAJKOT','SURAT'))
)
;
INSERT INTO CUSTOMER VALUES('C101','HAPPY','HAPPY@GMAIL.COM','RAJKOT')
;
INSERT INTO CUSTOMER VALUES('C102','RICHA','RICHA@GMAIL.COM','SURAT')
;
INSERT INTO CUSTOMER VALUES('C103','DHARA','DHARA@GMAIL.COM','RAJKOT')
;


-- CHECK UPPER IN
DROP TABLE STUDENT;
CREATE TABLE STUDENT (
	ER_NO NUMBER(10) PRIMARY KEY,
	NAME VARCHAR2(30) NOT NULL,
                CITY VARCHAR2(20)
CHECK (UPPER (CITY)IN     ('RAJKOT','SURAT','GOA','DIU','KOZIKODE')),
	ADM_DATE DATE
CHECK (ADM_DATE LIKE '%JUL%'),
	DOB DATE
CHECK (DOB<'1-JAN-2004')
)
;
INSERT INTO STUDENT VALUES ('1234567890','HAPPY','RAJKOT','01-JUL-2022','31-DEC-2003')
;
INSERT INTO STUDENT VALUES ('5987654321','RICHA','SURAT','30-JUL-2022','21-DEC-2003')
;
INSERT INTO STUDENT VALUES ('4987654991','DHARA','GOA','25-JUL-2022','14-JUN-2002')
;
INSERT INTO STUDENT VALUES ('3987654891','RADHA','DIU','01-JUL-2022','01-NOV-2003')
;
INSERT INTO STUDENT VALUES ('2987654891','JULI','KOZIKODE','15-JUL-2022','04-NOV-2000')
;
SELECT * FROM STUDENT;


FOREIGN KEY
TABLE_1
CREATE TABLE COLLEGE(
		CID NUMBER(5) PRIMARY KEY,
		NAME VARCHAR2(20),
		CONTACT NUMBER(10)
)
;
INSERT INTO COLLEGE VALUES ('1234','AU','9876543121')
;
INSERT INTO COLLEGE VALUES ('1244','SU','7876543121')
;
INSERT INTO COLLEGE VALUES ('1264','MU','8876543121')
;
INSERT INTO COLLEGE VALUES ('1334','AU','7876543121')
;
SELECT * FROM COLLEGE;

TABLE_2
CREATE TABLE STUDENT (
	ROLL_NO NUMBER(3) PRIMARY KEY,
	NAME VARCHAR2(20),
	CID NUMBER(5) REFERENCES COLLEGE
)
;
INSERT INTO STUDENT VALUES ('123','HAPPY','1234')
;
INSERT INTO STUDENT VALUES ('133','RICHA','1244')
;
INSERT INTO STUDENT VALUES ('623','DHARA','1264')
;
INSERT INTO STUDENT VALUES ('423','NENA','1334')
;
SELECT * FROM STUDENT;


EX_12_COMPOSITE PRIMARY KEY & FOREIGN KEY
TABLE_1
DROP TABLE STUDENT;
CREATE TABLE STUDENT(
                    ROLL_NO NUMBER(3),
                    DEPARTMENT VARCHAR2(3),
                    SEMESTER NUMBER(2),
                    DIVISION VARCHAR2(1),
                    NAME VARCHAR2(30),
                    CITY VARCHAR2 (20),
                    CONTACT NUMBER(10),
                    PRIMARY KEY (ROLL_NO,DEPARTMENT,SEMESTER,DIVISION)
)
;
INSERT INTO STUDENT (ROLL_NO,DEPARTMENT,SEMESTER,DIVISION,NAME) VALUES (001,'MCA',1,'A','HAPPY')
;
INSERT INTO STUDENT (ROLL_NO,DEPARTMENT,SEMESTER,DIVISION,NAME) VALUES (001,'MCA',1,'B','HAPPY')
;
INSERT INTO STUDENT (ROLL_NO,DEPARTMENT,SEMESTER,DIVISION,NAME) VALUES (011,'MCA',1,'B','RICHA')
;
SELECT * FROM STUDENT;

TABLE_2
CREATE TABLE RESULT (
                    RESULT_ID NUMBER(5) PRIMARY KEY,
                    GRADE VARCHAR2(1),
                    ROLL_NO NUMBER(3),
                    DEPARTMENT VARCHAR2(3),
                    SEMESTER NUMBER(2),
                    DIVISION VARCHAR2(1),
                    FOREIGN KEY (ROLL_NO,DEPARTMENT,SEMESTER,DIVISION) REFERENCES STUDENT
)
;
INSERT INTO RESULT VALUES (01234,'A',001,'MCA',1,'B')
;
INSERT INTO RESULT VALUES (01235,'A',011,'MCA',1,'B')
;
INSERT INTO RESULT VALUES (12345,'A',011,'MCA',1,'B')
;
SELECT * FROM RESULT;


Ex-15 -ALTER TABLE — ADD & MODIFY
CREATE TABLE DEMO(
		EMP_NO NUMBER(3),
		EMP_NAME VARCHAR2(20)
)
;
DESC DEMO;
--ADD CLAUSE                                                                                                                                                                                                                                                                                                                                                                                            
--ADD SINGLE COLUMN
ALTER TABLE DEMO ADD SALARY NUMBER(5)
; 
--ADD MULTIPLE COLUMN
ALTER TABLE DEMO ADD (DESIGNATION VARCHAR2(20),DOB DATE)
;
--MODIFY CLAUSE
--MODIFY SIZE
ALTER TABLE DEMO MODIFY EMP_NO NUMBER(2)
;
--MODIFY DATA TYPE
ALTER TABLE DEMO MODIFY EMP_NO VARCHAR2(2)
;
--MODIFY CONSTRAINT
ALTER TABLE DEMO MODIFY EMP_NO VARCHAR2(2) PRIMARY KEY
;
--DROP CLAUSE
--DROP COLUMN CLAUSE
ALTER TABLE DEMO DROP COLUMN DESIGNATION
;
--DROP CONSTRAINT
ALTER TABLE DEMO  DROP PRIMARY KEY
;
--ADD CONSTRAINT
ALTER TABLE DEMO ADD CONSTRAINT CHK_DEMO_SALARY CHECK (SALARY>=1000)
;
--DROP CONSTRAINT WHEN THE NAME OF CONSTRAINT IS MENTIONED
INSERT INTO DEMO VALUES (12,'HAPPY',1000,'MANAGER','12-JAN-2002')
;
INSERT INTO DEMO VALUES (22,'HAPPY',800,'MANAGER','12-JAN-2002')--ERROR

;
ALTER TABLE DEMO DROP CONSTRAINT CHK_DEMO_SALARY
;

Ex-16 -ALTER TABLE — ADD,DROP,MODIFY,RENAME
TABLE_1
CREATE TABLE DEMO (
	EMP_NO NUMBER(3),
	EMP_NAME VARCHAR2(30)
)
;
ALTER TABLE DEMO ADD (SALARY NUMBER(5))
;
ALTER TABLE DEMO ADD CONSTRAINT CHK_DEMO_SALARY CHECK (SALARY>=1000)
;
--RENAME
--RENAME THE COLUMN
ALTER TABLE DEMO RENAME COLUMN SALARY TO SAL
;
--RENAME THE TABLE
ALTER TABLE DEMO RENAME TO DEMO1
;
SELECT CONSTRAINT_NAME , CONSTRAINT_TYPE,SEARCH_CONDITION FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DEMO1'
;

--ADDING COLUMN TO THE TABLE USING ALTER
ALTER TABLE DEMO1 ADD(DESIGNATION VARCHAR2(10))
;


--SETTING PRIMARY KEY AND GIVING NAME TO IT USING ALTER
ALTER TABLE DEMO1 ADD CONSTRAINT PK_EMP_NO_DEMO PRIMARY KEY(EMP_NO)
;

SELECT CONSTRAINT_NAME , CONSTRAINT_TYPE,SEARCH_CONDITION FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DEMO1'
;

--DROP PRIMARY KEY
ALTER TABLE DEMO1 DROP PRIMARY KEY
;

--SETTING COMPOSITE PRIMARY KEY USING ALTER
ALTER TABLE DEMO1 ADD PRIMARY KEY (EMP_NO,DESIGNATION)
;


--SETTING THE DEFAULT VALUE USING ALTER 
ALTER TABLE DEMO1 ADD (GENDER VARCHAR2(6)DEFAULT 'MALE')
;

INSERT INTO DEMO1 VALUES(101,'HAPPY',12000,'PROF',DEFAULT)
;

--SETTING UNIQUE CONSTRAINT
ALTER TABLE DEMO1 ADD CONSTRAINT UNQ_DEMO_EMPNAME UNIQUE(EMP_NAME)
;

--ASSIGNING NOT NULL
ALTER TABLE DEMO1 MODIFY (EMP_NAME VARCHAR2(20)NOT NULL)
;

INSERT INTO DEMO1 (EMP_NO , SAL ,DESIGNATION ,GENDER) VALUES (102,20000,'TEACHER','FEMALE')
;


TABLE_2
CREATE TABLE DEPT(
				DEPT_NO NUMBER(3) PRIMARY KEY,
				DEPT_NAME VARCHAR2(20)  
)
;

--SETTING FOREIGN KEY
ALTER TABLE DEMO1 ADD (DEPT_NO NUMBER(3)REFERENCES DEPT)
;

INSERT INTO DEPT VALUES (11,'MCA')
;

INSERT INTO DEMO1 VALUES(102,'RICHA',12000,'PROF',DEFAULT,11)
;
SELECT * FROM DEMO1;


EX_16_DROP,PURGE,FLASHBACK,TRUNCATE vs DELETE
SELECT * FROM TAB;
SHOW RECYCLEBIN;
SELECT COUNT(*)FROM TAB;

 CREATE TABLE PEN(
		PEN_ID NUMBER(3),
		PEN_TYPE VARCHAR2(5)
)
;

DROP TABLE PEN;

– WHEN WE DROP SIMPLY WITHOUT PURGE THEN WITH FLASHBACK WE CAN ROLLBACK THE TABLE
FLASHBACK TABLE PEN TO BEFORE DROP
;


DESC PEN;

SELECT * FROM PEN;

--TO CLEAN THE RECYCLEBIN
PURGE RECYCLEBIN;

DELETE
INSERT INTO PEN VALUES (101,'ABC')
 ;
COMMIT;
INSERT INTO PEN VALUES (111,'ABC')
;

 DELETE FROM PEN;

ROLLBACK;

SELECT * FROM PEN
 ;


TRUNCATE
TRUNCATE TABLE PEN;



SELECT * FROM PEN;





EX_17_DML___INSERT
CREATE TABLE DEMO (
					SID NUMBER(2) NOT NULL,
					DEPARTMENT VARCHAR2(5) DEFAULT 'MCA',
					DIVISION VARCHAR2(1)NOT NULL,
					SEMESTER NUMBER(1)NOT NULL,
					NAME VARCHAR2(30),
					CITY VARCHAR2(15)
)
;

--SIMPLE INSERT QUERY
INSERT INTO DEMO VALUES (1,'MCA','A',1,'HAPPY','RAJKOT')
;
--INSERT QUERY WITH GIVE FIELD NAME
INSERT INTO DEMO (SID,DEPARTMENT,DIVISION,SEMESTER) VALUES (2,'MBA','B',2)
;
--INSERT QUERY WITH GIVE FIELD NAME NOT IN SEQUENCE
INSERT INTO  DEMO (CITY,SID,NAME,DEPARTMENT,SEMESTER,DIVISION) VALUES ('SURAT',3,'RICHA','MCA',3,'A')
;


--WORKING WITH DEFAULT AND NULL WHILE INSERTING
INSERT INTO DEMO (SID,DIVISION,SEMESTER)VALUES(4,'A',2)
;
INSERT INTO DEMO (SID,DIVISION,SEMESTER,DEPARTMENT)VALUES(5,'A',1,DEFAULT)
;
INSERT INTO DEMO (SID,DIVISION,SEMESTER,DEPARTMENT,CITY)VALUES(6,'A',3,DEFAULT,NULL)
;
INSERT INTO DEMO (SID,DIVISION,SEMESTER,DEPARTMENT,CITY)VALUES(7,'A',1,NULL,'PUNE')
;


--INSERTING VALUES BY TAKING FROM USERS
INSERT INTO DEMO (SID,DIVISION,SEMESTER,NAME,CITY)
	VALUES (&SID,&DIVISION,&SEMESTER,&NAME,&CITY)
;

SELECT * FROM DEMO;


EX_18_DML___INSERT
--INSERTING DATA FROM OTHER TABLE 
--NUMBER OF COLUMN IN BOTH TABLE MUST BE SAME
--DATA TYPE OF COLUMN IN BOTH TABLES MUST BE SAME
TABLE_1
CREATE TABLE ONE (
		A NUMBER(1),
		B VARCHAR2(1)
)
;

INSERT INTO ONE VALUES(1,'Q')
;
INSERT INTO ONE VALUES(2,'W')
;

TABLE_2
CREATE TABLE TWO (
		A NUMBER(1),
		B VARCHAR2(1)
)
;

INSERT INTO TWO VALUES(1,'A')
;
INSERT INTO TWO VALUES(2,'B')
;

--INSERTING DATA FROM OTHER TABLE 
INSERT INTO ONE(A,B) 
SELECT A,B FROM TWO
;

SELECT * FROM ONE;


EX_19_DML___INSERT
--INSERT USING 'WITH CHECK' OPTION
CREATE TABLE STUDENT(
					ROLL_NO NUMBER(3),
					NAME VARCHAR2(30),
					CITY VARCHAR2(15)
)
;

--RECORD WILL BE INSERTED SUCCESSFULLY
INSERT INTO (SELECT ROLL_NO,NAME,CITY FROM STUDENT01 WHERE CITY='RAJKOT' WITH CHECK OPTION)
VALUES (111,'HAPPY','RAJKOT')
;

--ERROR
INSERT INTO (SELECT ROLL_NO,NAME,CITY FROM STUDENT01 WHERE CITY='RAJKOT' WITH CHECK OPTION)
VALUES (112,'DHARA','SURAT')
;
--RECORD WILL BE INSERTED SUCCESSFULLY
INSERT INTO STUDENT01 VALUES(112,'RICHA','VADODARA')
;


SELECT * FROM STUDENT01;

(SAME ID … FIRST TIME LOGIN)
--INSERT USING 'WITH CHECK OPTION',ACCEPTING INPUT FROM THE USERS
INSERT INTO (SELECT ROLL_NO,NAME,CITY FROM STUDENT01 WHERE CITY='RAJKOT' WITH CHECK OPTION)
VALUES (&ROLL_NO,'&NAME','&CITY')
;

COMMIT;
SELECT * FROM STUDENT01;
-- WE CAN ALSO ADD SPECIFY COLUMN
INSERT INTO ONE(B, C) 
SELECT B, C FROM TWO
;



EX_20_DML CONDITIONAL INSERT
--INSERT
--CONDITIONAL INSERT

DROP TABLE STUDENT_MASTER PURGE;
CREATE TABLE STUDENT_MASTER(
							SID NUMBER(3),
							SNAME VARCHAR2(30),
							BACHELOR_DEGREE VARCHAR2(25),
							CITY VARCHAR2(30),
							DID NUMBER(2),
							DNAME VARCHAR2(15)
)
;

INSERT INTO STUDENT_MASTER VALUES (111,'ABC','BBA','SURAT',11,'MBA')
;
INSERT INTO STUDENT_MASTER VALUES (112,'CDE','BBA','PUNE',11,'MBA')
;
INSERT INTO STUDENT_MASTER VALUES (113,'EFG','BCA','RAJKOT',11,'MCA')
;
INSERT INTO STUDENT_MASTER VALUES (114,'GHI','BCA','SURAT',11,'MCA')
;
INSERT INTO STUDENT_MASTER VALUES (115,'IJK','BSC','PUNE',11,'MSC')
;
INSERT INTO STUDENT_MASTER VALUES (116,'KLM','BSC','RAJKOT',11,'MSC')
;
INSERT INTO STUDENT_MASTER VALUES (117,'MNO','BCOM','SURAT',11,'MCOM')
;
INSERT INTO STUDENT_MASTER VALUES (118,'OPQ','BCOM','PUNE',11,'MCOM')
;

INSERT INTO STUDENT_MASTER VALUES (119,'QRS','BA','RAJKOT',11,'MA')
;
INSERT INTO STUDENT_MASTER VALUES (120,'STU','BA','SURAT',11,'MA')
;

SELECT * FROM STUDENT_MASTER;

DROP TABLE BACHELOR_COURSE PURGE;
CREATE TABLE BACHELOR_COURSE(
							SID NUMBER(3),
							SNAME VARCHAR2(30),
							BACHELOR_DEGREE VARCHAR2(25)
)
;

DROP TABLE ADMISSION_IN PURGE;
CREATE TABLE ADMISSION_IN(
						DID NUMBER(2),
						DNAME VARCHAR2(15)
)
;

--INSERTING DATA INTO BACHELOR_COURSE FROM STUDENT_MASTER
SELECT COUNT (*) FROM BACHELOR_COURSE;

INSERT ALL 
	WHEN SID>=111 THEN 
	INTO BACHELOR_COURSE (SID,SNAME,BACHELOR_DEGREE)
SELECT SID,SNAME,BACHELOR_DEGREE 	FROM STUDENT_MASTER
;

SELECT * FROM BACHELOR_COURSE;


--INSERTING DATA INTO ADMISSION_IN FROM STUDENT_MASTER
SELECT COUNT (*) FROM ADMISSION_IN;

INSERT ALL 
	WHEN DNAME='MCA' THEN 
	INTO ADMISSION_IN (DID,DNAME)
SELECT DID,DNAME	 FROM STUDENT_MASTER
;

SELECT * FROM ADMISSION_IN;

INSERT ALL 
WHEN DID>=13 THEN 
INTO ADMISSION_IN (DID,DNAME)
SELECT DID,DNAME	FROM STUDENT_MASTER
;

-- MCA COLUMN IS FROM THE ABOVE INSERT QUERY
SELECT * FROM ADMISSION_IN;

--IF THE COLUMN NAME IS DIFFERENT THEN ALSO WE CAN INSERT IN THE COLUMN AND INSERT ONLY ONE COLUMN ALSO
--INSERTING DATA INTO HIII FROM STUDENT_MASTER
CREATE TABLE HIII(
				H1 VARCHAR2(15),
				H2 NUMBER(2)
)
;

INSERT ALL 
			WHEN DNAME='MA' THEN 
			INTO HIII(H1)
		SELECT DNAME
FROM STUDENT_MASTER
;

SELECT * FROM HIII;




EX_21_COPY THE TABLE
--COPY THE TABLE WITH RECORDS
CREATE TABLE DEMO_STUD_MASTER
AS
SELECT * FROM STUDENT_MASTER
;

SELECT * FROM DEMO_STUD_MASTER;

--COPY THE TABLE WITHOUT RECORDS
SELECT COUNT (*) FROM STUDENT_MASTER;

SELECT COUNT (*) FROM STUDENT_MASTER
	WHERE SID=112
;

SELECT COUNT (*) FROM STUDENT_MASTER
	WHERE SID=12
;

CREATE TABLE DEMO_STUD_MASTER
AS
SELECT * FROM STUDENT_MASTER
WHERE SID=12
;

SELECT * FROM DEMO_STUD_MASTER;



DESC DEMO_STUD_MASTER;


EX_22_UPDATE & DELETE STATEMENT
CREATE TABLE SALARY_MASTER(
						E_ID NUMBER(3),
						E_NAME VARCHAR2(30),
						SALARY NUMBER(6),
						DESIGNATION VARCHAR2(15),
						BRANCH VARCHAR2(30),
						USER_NAME VARCHAR2(15)
)
;

INSERT INTO SALARY_MASTER VALUES (101,'HAPPY',1000,'MANAGER','PUNE','HAPPY')
;
INSERT INTO SALARY_MASTER VALUES (102,'HIYA',2000,'PROGRAMMER','RAJKOT','HIYA')
;
INSERT INTO SALARY_MASTER VALUES (103,'NAVYA',1500,'PROGRAMMER','GANDHINAGAR','NAVYA')
;
INSERT INTO SALARY_MASTER VALUES (104,'DHARA',2500,'MANAGER','RAJKOT','DHARA')
;
INSERT INTO SALARY_MASTER VALUES (105,'RICHA',3000,'PROGRAMMER','BANGALORE','RICHA')
;

SELECT * FROM SALARY_MASTER;

--UPDATE
--UPDATE ALL THE RECORDS
UPDATE SALARY_MASTER
	SET SALARY = 3500
;


SELECT * FROM SALARY_MASTER;

ROLLBACK;

--UPDATE SALARY WHERE DESIGNATION IS MANAGER
UPDATE SALARY_MASTER 
	SET SALARY = 3500
WHERE DESIGNATION = 'MANAGER'
;

--UPDATE NAME
UPDATE SALARY_MASTER 
	SET E_NAME ='HAPPY PATEL'
WHERE E_ID = 101
;

--UPDATE IN MULTIPLE COLUMNS OF A SINGLE RECORD
UPDATE SALARY_MASTER 
	SET E_NAME='HIYA JAIN',
		SALARY = 2500,
		DESIGNATION = 'MANAGER'
WHERE E_ID=102
;

--UPDATE SELECTED MULTIPLE RECORDS
UPDATE SALARY_MASTER
	SET BRANCH = 'RAJKOT'
WHERE DESIGNATION ='PROGRAMMER'
;

--MODIFY RECORDS USING UPDATE
UPDATE SALARY_MASTER 
	SET USER_NAME=SUBSTR(E_NAME,1,2)||'PROG'
WHERE DESIGNATION LIKE '%MER'
;

--UPDATE CITY
UPDATE SALARY_MASTER
	SET BRANCH ='SURAT'
WHERE BRANCH = 'RAJKOT'
;



--DELETE
--DELETE BY E_ID
DELETE FROM SALARY_MASTER
WHERE E_ID = 101
;
SELECT * FROM SALARY_MASTER;


--DELETE WHOSE BRANCH IS RAJKOT
DELETE FROM SALARY_MASTER
WHERE BRANCH = 'RAJKOT'
;
SELECT * FROM SALARY_MASTER;



--DELETE ALL RECORDS
DELETE FROM SALARY_MASTER;
SELECT * FROM SALARY_MASTER;


--DELETE THE RECORD WHERE LAST 3 CHARACTERS OF DESIGNATION ARE 'MER'
DELETE FROM SALARY_MASTER
WHERE DESIGNATION LIKE '%MER'
;
SELECT * FROM SALARY_MASTER;


--DELETE RECORDS WHOSE SALARY IS MORE THAN 2000
DELETE FROM SALARY_MASTER
WHERE SALARY>2000 

;
SELECT * FROM SALARY_MASTER;


CREATE TABLE H1(
		AA NUMBER(2)
)
;
ROLLBACK;
SELECT * FROM SALARY_MASTER;


--TCL STATEMENT (TRANSACTION CONTROL STATEMENT)
--COMMIT(SAVE) , ROLLBACK(UNDO) , SAVEPOINT(PARTIAL SAVE)
ROLLBACK S1;



--DELETE THE RECORDS
DELETE FROM SALARY_MASTER 
WHERE SALARY<=2000
;
SAVEPOINT S1;

DELETE FROM SALARY_MASTER 
WHERE BRANCH='BANGALORE'
;
SAVEPOINT S2;


ROLLBACK TO S2;


ROLLBACK TO S1;


EX_23_SELECT STATEMENT
DROP TABLE EMPLOYEE PURGE;
c--SELECTING ALL THE COLUMNS
SELECT * FROM EMPLOYEE;

--SELECTING COLUMN AS PER THE REQUIREMENT
SELECT EMPNO,ENAME,JOB FROM EMPLOYEE;
 

--THIS QUERY ONLY DISPLAY THE NEW COLUMN IN TABLE NOT CHANGE
--USING EXPRESSION
SELECT EMPNO,ENAME,JOB,SALARY,SALARY+1000 AS NEW_SAL
FROM EMPLOYEE; 


SELECT * FROM EMPLOYEE;

--USING ALIAS (ALIAS CAN BE WRITTEN AFTER THE COLUMN NAME OR EXPRESSION)
SELECT EMPNO,ENAME,JOB,SALARY,SALARY+1000 AS NEW_SAL
FROM EMPLOYEE;


--USING ALIAS WITHOUT 'AS'
SELECT EMPNO,ENAME,JOB,SALARY,SALARY+1000 NEW_SAL
FROM EMPLOYEE; 


--IF YOU WANT TO SPACE BETWEEN ALIAS & BY DEFAULT ALIAS NAME WILL BE APPEARED IN SMALL LETTERS THAN
SELECT EMPNO,ENAME,JOB,SALARY,SALARY+1000 "NEW SAL"
FROM EMPLOYEE; 

SELECT EMPNO,ENAME,JOB,SALARY,SALARY+1000 "new sal"
FROM EMPLOYEE;


--GIVING INCREMENT OF 200 EVERY MONTH ,TOTAL YEARLY SALARY "USING EXPRESSION"
SELECT EMPNO,ENAME,JOB,SALARY,12*(salary+200)
FROM EMPLOYEE;


--LITERAL
SELECT 'HAPPY' FROM EMPLOYEE;

SELECT 'MR' || ENAME FROM EMPLOYEE;

--USING ALIAS WITH LITERAL
SELECT ' MR. ' || ENAME AS ENAME FROM EMPLOYEE;



--PRESENTING OUTPUT USING LITERAL
SELECT ENAME || ' IS WORKING AS A ' || JOB || ' AND HAVE MONTHLY SALARY OF RS. ' || SALARY || ' AND EARNS ' || SALARY*12 || ' ANNUALLY ' AS EMP_DETAILS
FROM EMPLOYEE;

--IDENTIFYING THE PROBLEM WITH NULL 
SELECT EMPNO,ENAME,JOB AS DESIGNATION ,SALARY ,COMM,SALARY+COMM AS NEW_SAL
FROM EMPLOYEE; 



--SOLUTION OF THE ABOVE PROBLEM
SELECT EMPNO,ENAME,SALARY,COMM,SALARY+NVL(COMM,0) AS TOTAL_SALARY
FROM EMPLOYEE;


EX_24_SELECT with DISTINCT and WHERE CLAUSE 
DROP TABLE EMPLOYEE PURGE;
CREATE TABLE EMPLOYEE(
			EMPNO NUMBER(4) PRIMARY KEY,
			ENAME VARCHAR2(50) NOT NULL,
			JOB VARCHAR2(10),
			MGR NUMBER(4),
			BIRTHDATE DATE,
			HIREDATE DATE,
			SALARY NUMBER(6) DEFAULT 1000
			CHECK(SALARY>=100),
			COMM NUMBER(7,2),
			DEPTNO NUMBER(3),
			CHECK(HIREDATE>=ADD_MONTHS(BIRTHDATE,12*21))
)
;
INSERT INTO EMPLOYEE VALUES (7369, 'ABHI','CLERK',7902, '10-MAR-80', '17-DEC-08',800 ,NULL,20)
;
INSERT INTO EMPLOYEE VALUES (7499, 'KABHI','SALESMAN',7698, '11-SEP-80', '20-FEB-03',1600 ,300,30)
;
INSERT INTO EMPLOYEE VALUES (7521, 'ANKIT','SALESMAN',7698, '27-APR-81', '22-FEB-03',1250,500,30)
;
INSERT INTO EMPLOYEE VALUES (7566,'DEVEN','MANAGER',7839,'24-JUN-81','02-APR-03',2975,NULL,20)
;
INSERT INTO EMPLOYEE VALUES (7654,'DHARMIK','SALESMAN',7698,'20-SEP-82','28-SEP-03',1250,1400,30)
;
INSERT INTO EMPLOYEE VALUES (7698,'CHARLIE','MANAGER',7839,'26-APR-82','01-MAY-03',2850,NULL,30)
;
INSERT INTO EMPLOYEE VALUES (7782,'HARIOM','MANAGER',7839,'25-MAY-83','09-JUN-04',2450,NULL,10)
;
INSERT INTO EMPLOYEE VALUES (7788,'TIRTH','ANALYST',7566,'28-MAR-87','19-APR-09 ',3000,NULL,20)
;
INSERT INTO EMPLOYEE VALUES (7839,'RAJA','PRESIDENT ',NULL,'20-NOV-81','17-NOV-03 ',5000,NULL,10)
;
INSERT INTO EMPLOYEE VALUES (7844,'KAMLESH','SALESMAN',7698,'19-OCT-81','08-SEP-03 ',1500,0,30)
;
INSERT INTO EMPLOYEE VALUES (7876,'ANIL','CLERK',7788,'21-MAY-86','23-MAY-09',1100,NULL,20)
;
INSERT INTO EMPLOYEE VALUES (7900,'RAMESH','CLERK',7698,'22-AUG-80','03-DEC-03',950,NULL,30)
;
INSERT INTO EMPLOYEE VALUES (7902,'NAMAN','ANALYST',7566,'19-NOV-82','03-DEC-03',3000,NULL,20)
;
INSERT INTO EMPLOYEE VALUES (7934,'SOHAN','CLERK',7782,'12-FEB-82','23-JAN-04',1300,NULL,10)
;


--SELECT
--DISTINCT
--DISTINCT MUST BE USED AFTER SELECT ONLY
--WITHOUT DISTINCT
SELECT JOB FROM EMPLOYEE;

--WITH DISTINCT
SELECT DISTINCT JOB FROM EMPLOYEE;

--WHERE CLAUSE
--IT IS USED TO FILTER THE DATA WHILE SELECTING FROM THE TABLE
--SELECT WITHOUT WHERE 
SELECT * FROM EMPLOYEE;

--FILTERING RECORD USING WHERE
SELECT * FROM EMPLOYEE
WHERE SALARY=3000
;

--FILTERING ROWS AND COLUMNS 
SELECT EMPNO,ENAME,JOB,SALARY 
FROM EMPLOYEE
WHERE SALARY=3000
;

--SETTING TWO CONDITIONS IN 'WHERE'
AND
SELECT EMPNO,ENAME,JOB,SALARY
FROM EMPLOYEE
WHERE SALARY>=1500 AND JOB ='SALESMAN'
;    

OR
SELECT EMPNO,ENAME,JOB,SALARY
FROM EMPLOYEE
WHERE SALARY>=1500 OR JOB ='SALESMAN'
; 



--WHERE CLAUSE WORKS WELL WITH DATE DATATYPE ALSO 
SELECT * FROM EMPLOYEE
WHERE BIRTHDATE ='24-JUN-81'
;


>(GREATER THAN)
SELECT * FROM EMPLOYEE
WHERE BIRTHDATE > '24-JUN-81'
;


--ALL THE OPERATORS LISTED ABOVE WORK WITH ALL THE DATATYPES
--EVEN WITH THE CHARACTER ALSO
>(GREATER THAN)
SELECT * FROM EMPLOYEE
WHERE JOB > 'CLERK'
;

--IN THE DATA -> character is case sensitive
--IN THE DATA -> date is format specific(DD-MON-RR)
SELECT * FROM EMPLOYEE
WHERE JOB = 'CLERK'
;


--USING 'BETWEEN AND' OPERATOR WHERE column_name BETWEEN lower_limit AND upper_limit
;*FOR EX : WHERE SALARY BETWEEN 2000 AND 3000 
	    WHERE BIRTHDATE BETWEEN '11-SEP-81' AND '24-JUN-90' 
	   WHERE EMPNAME BETWEEN 'HARIOM' AND 'TIRTH'*;
SELECT EMPNO,ENAME,SALARY
FROM EMPLOYEE
WHERE SALARY BETWEEN 2000 AND 3000
;

SELECT EMPNO,ENAME,SALARY,BIRTHDATE
FROM EMPLOYEE
WHERE BIRTHDATE BETWEEN '24-JUN-90' AND '11-SEP-81'
;

SELECT EMPNO,ENAME,SALARY,BIRTHDATE
FROM EMPLOYEE
WHERE BIRTHDATE BETWEEN '11-SEP-81' AND '24-JUN-90'
;

SELECT EMPNO,ENAME,SALARY,BIRTHDATE
FROM EMPLOYEE
WHERE ENAME BETWEEN 'HARIOM' AND 'TIRTH'
;


--REVERSING THE SITUATION BY ADDING NOT
--WITH NOT
SELECT EMPNO,ENAME,SALARY
FROM EMPLOYEE
WHERE SALARY NOT BETWEEN 2000 AND 3000
;

SELECT EMPNO,ENAME,SALARY,BIRTHDATE
FROM EMPLOYEE
WHERE BIRTHDATE NOT BETWEEN '11-SEP-81' AND '24-JUN-90'
;


SELECT EMPNO,ENAME,SALARY,BIRTHDATE
FROM EMPLOYEE
WHERE ENAME NOT BETWEEN 'HARIOM' AND 'TIRTH'
;


--USING 'IN'
;* FOR EX = WHERE DEPTNO IN(10,20)
			WHERE DEPTNO NOT IN(10,20)
			WHERE JOB IN('CLERK','ANALYST')
			WHERE JOB IN NOT('CLERK','ANALYST')*;
SELECT EMPNO,ENAME,SALARY,DEPTNO
FROM EMPLOYEE
WHERE DEPTNO IN (10,20)
;


SELECT EMPNO,ENAME,SALARY,DEPTNO,JOB
FROM EMPLOYEE
WHERE JOB IN('CLERK','ANALYST')
;

NOT
SELECT EMPNO,ENAME,SALARY,DEPTNO
FROM EMPLOYEE
WHERE DEPTNO NOT IN (10,20)
;

SELECT EMPNO,ENAME,SALARY,DEPTNO,JOB
FROM EMPLOYEE
WHERE JOB NOT IN('CLERK','ANALYST')
;


EX_24_SELECT (LIKE & NULL)
--USING 'NULL'
;*
'%' - DENOTES 0 OR MORE CHARACTERS
'_' - DENOTES 1 CHARACTER
*;

--NAME STARTING WITH 'A'
SELECT EMPNO,ENAME,JOB,DEPTNO
FROM EMPLOYEE
WHERE ENAME LIKE 'A%'
;


--NAME STARTING WITH 'A' AND THIRD CHARACTER MUST BE 'H'
SELECT EMPNO,ENAME,JOB,DEPTNO
FROM EMPLOYEE
WHERE ENAME LIKE 'A_H%'
;

--LIKE WORKS WITH DATE
--BIRTH YEAR  80
SELECT EMPNO,ENAME,JOB,DEPTNO,BIRTHDATE
FROM EMPLOYEE
WHERE BIRTHDATE LIKE '%80'
;


--NOT LIKE
--NAME NOT STARTING WITH 'A'
SELECT EMPNO,ENAME,JOB,DEPTNO
FROM EMPLOYEE
WHERE ENAME NOT LIKE 'A%'
;

--NAME NOT STARTING WITH 'A' AND THIRD CHARACTER MUST BE 'H'
SELECT EMPNO,ENAME,JOB,DEPTNO
FROM EMPLOYEE
WHERE ENAME NOT LIKE 'A_H%'
;

--LIKE WORKS WITH DATE
--BIRTH YEAR NOT 80
SELECT EMPNO,ENAME,JOB,DEPTNO,BIRTHDATE
FROM EMPLOYEE
WHERE BIRTHDATE NOT LIKE '%80'
;

--WORKING WITH NULL
--FIND EMPLOYEES WHOSE COMMISSION IS NULL
--THIS WILL NOT WORK AS DESIRED
SELECT EMPNO,ENAME,JOB,SALARY,COMM
FROM EMPLOYEE
WHERE COMM=NULL
;


SELECT * FROM EMPLOYEE;


--THIS WILL WORK AS DESIRED
SELECT EMPNO,ENAME,JOB,SALARY,COMM
FROM EMPLOYEE
WHERE COMM IS NULL
;


--FIND EMPLOYEES WHOSE COMMISSION IS NOT NULL 
SELECT EMPNO,ENAME,JOB,SALARY,COMM
FROM EMPLOYEE
WHERE COMM IS NOT NULL
;


--FIND EMPLOYEES WHOSE COMMISSION IS NOT NULL AND 0
SELECT EMPNO,ENAME,JOB,SALARY,COMM
FROM EMPLOYEE
WHERE COMM IS NOT NULL AND COMM>0
;


--NOTE-NULL IS APPLICABLE IN ANY DATATYPE
--NAME CONTAINS 'A' AT ANY POSITION
SELECT * FROM EMPLOYEE
WHERE ENAME LIKE '%A%'
;


--NAME NOT CONTAINS 'A' AT ANY POSITION
SELECT * FROM EMPLOYEE
WHERE ENAME NOT LIKE '%A%'
;


--EMPLOYEES WHOSE BIRTH YEAR IS 86
SELECT * FROM EMPLOYEE
WHERE BIRTHDATE  LIKE '%-86'
;


--DEPARTMENT  20 AND JOB MUST BE 'CLERK'
SELECT * FROM EMPLOYEE
WHERE DEPTNO LIKE 20 AND JOB = 'CLERK'
;


--DEPARTMENT  20 AND JOB MUST BE 'CLERK' AND SALARY 1100
SELECT * FROM EMPLOYEE
WHERE DEPTNO LIKE 20 AND JOB = 'CLERK' AND SALARY = 1100
;


--DEPARTMENT  20 AND JOB MUST BE 'CLERK' AND SALARY NOT EQUAL TO 1100
SELECT * FROM EMPLOYEE
WHERE DEPTNO LIKE 20 AND JOB = 'CLERK' AND SALARY!=1100
;


--PERSON WHOSE JOB IS CLERK
--LIKE
SELECT * FROM EMPLOYEE 
WHERE JOB LIKE 'CLERK'
;


--IN
SELECT * FROM EMPLOYEE 
WHERE JOB IN ('CLERK')
;


--PERSON WHOSE JOB IS NOT CLERK AND ANALYST
SELECT * FROM EMPLOYEE 
WHERE JOB IN ('CLERK','ANALYST')
;


--PERSON WHOSE JOB IS NOT CLERK AND ANALYST
SELECT * FROM EMPLOYEE 
WHERE JOB NOT IN ('CLERK','ANALYST')
;


SELECT * FROM EMPLOYEE
WHERE DEPTNO=20 OR SALARY>2000 AND JOB='CLERK'
;


SELECT * FROM EMPLOYEE
WHERE (DEPTNO=20 OR SALARY>2000) AND JOB='CLERK'
;

24-12-2022
--ORDER BY
--ASCENDING ORDER OR DESCENDING ORDER
--SORT RECORD BY THEIR NAME 
SELECT * FROM EMPLOYEE
ORDER BY ENAME
;


SELECT * FROM EMPLOYEE
ORDER BY ENAME DESC
;

--SORT BY SALARY
SELECT * FROM EMPLOYEE
ORDER BY SALARY
;

SELECT * FROM EMPLOYEE
ORDER BY SALARY DESC
;


--SORT BY BIRTHDATE
SELECT * FROM EMPLOYEE
ORDER BY BIRTHDATE
;

SELECT * FROM EMPLOYEE
ORDER BY BIRTHDATE DESC
;


--USING 'ORDER BY' AND 'WHERE'
SELECT EMPNO , ENAME , SALARY 
FROM EMPLOYEE
WHERE SALARY>1000
ORDER BY SALARY
;

SELECT EMPNO , ENAME , SALARY 
FROM EMPLOYEE
WHERE SALARY>1000
ORDER BY EMPNO DESC
;

SELECT EMPNO , ENAME , SALARY 
FROM EMPLOYEE
WHERE SALARY>1000
ORDER BY SALARY DESC
;

--TAKING MORE THAN ONE COLUMN FOR SORTING
SELECT EMPNO , ENAME , SALARY 
FROM EMPLOYEE
WHERE SALARY>1000
ORDER BY SALARY DESC , EMPNO
;

--WHILE SORTING DATA IN ASCENDING ORDER ON THE COLUMN WHICH CONTAIN 'NULL' RECORD CONTAINING NULL WILL COME LAST
SELECT * FROM EMPLOYEE
ORDER BY COMM
;

--WHILE SORTING DATA IN DESCENDING ORDER ON THE COLUMN WHICH CONTAIN 'NULL' RECORD CONTAINING NULL WILL COME FIRST
SELECT * FROM EMPLOYEE
ORDER BY COMM DESC
;

--USING NEW COLUMN MADE BY EXPRESSION TO SORT (ON THE BASIS OF ALIAS)
SELECT EMPNO, ENAME, SALARY, SALARY*12 AS ANNUAL_SALARY
FROM EMPLOYEE
WHERE JOB = 'CLERK'
ORDER BY ANNUAL_SALARY
;

--ALIAS CANNOT BE USED WITH 'WHERE' CLAUSE
--IT WILL GET AN ERROR

SELECT EMPNO, ENAME, SALARY, SALARY*12 AS ANNUAL_SALARY
FROM EMPLOYEE
WHERE ANNUAL_SALARY
ORDER BY ANNUAL_SALARY
;

--WRITING EXPRESSION IN 'WHERE'
SELECT EMPNO, ENAME, SALARY, SALARY*12 AS ANNUAL_SALARY
FROM EMPLOYEE
WHERE SALARY*12>10000
ORDER BY ANNUAL_SALARY
;

--SORTING BY COLUMN NUMBER
--CAN ALSO USE SELECT LIST COLUMN NUMBER(SEQUENCE)WITH ORDER BY SELECTED
SELECT EMPNO, ENAME, SALARY
FROM EMPLOYEE
ORDER BY 1
;

SELECT EMPNO, ENAME, SALARY
FROM EMPLOYEE
ORDER BY 2
;

SELECT EMPNO, ENAME, SALARY
FROM EMPLOYEE
ORDER BY 3 DESC
;

--IT WILL GENERATE AN ERROR HAS ONLY 3 COLUMNS ARE SELECT EMPNO , ENAME , SALARY
SELECT EMPNO, ENAME, SALARY
FROM EMPLOYEE
ORDER BY 4
;

--USING MORE THAN ONE COLUMN IN CASE OF THE TIE
SELECT EMPNO, ENAME, JOB, SALARY
FROM EMPLOYEE
ORDER BY JOB, SALARY, EMPNO
;

--CONVERT CHARACTER TO THE LOWER CASE 
SELECT LOWER('WINTER')FROM DUAL;


SELECT LOWER('WINTER') FROM EMPLOYEE;

SELECT ENAME, LOWER(ENAME) FROM EMPLOYEE;


UPDATE EMPLOYEE
SET ENAME = LOWER(ENAME)
WHERE EMPNO=7369
;


SELECT * FROM EMPLOYEE
WHERE ENAME = 'ABHI'
;

SELECT * FROM EMPLOYEE
WHERE UPPER(ENAME) = 'ABHI'
;

INSERT INTO EMPLOYEE (EMPNO,ENAME) VALUES (1111,LOWER('ABC'))
;

DELETE FROM EMPLOYEE
WHERE UPPER(ENAME) = 'ABC'
;

SELECT * FROM EMPLOYEE WHERE UPPER(ENAME) = 'ABC';


--GENERAL FUNCTION
--NVL
SELECT EMPNO,ENAME,COMM,NVL(COMM,0)FROM EMPLOYEE;


SELECT EMPNO,ENAME,COMM,NVL(TO_CHAR(COMM),'NA')FROM EMPLOYEE;


SELECT EMPNO,ENAME,COMM,SALARY,SALARY+NVL(COMM,0)FROM EMPLOYEE;


31;12;2022
--NVL WITH 'DATE'
SELECT EMPNO,ENAME,HIREDATE,NVL(HIREDATE,'01-JUN-2022')FROM EMPLOYEE;


--NVL WITH 'TEXT'
SELECT EMPNO,ENAME,JOB,NVL(JOB,'INTERN')FROM EMPLOYEE;

--NVL2
--SYNTAX:-NVL2(EXPRESSION1,EXPRESSION2,EXPRESSION3)

--IF THE FIRST EXPRESSION IS NULL THAN IT RETURNS THE THIRD EXPRESSION
--IF THE FIRST EXPRESSION IS NOT-NULL THAN IT RETURNS THE SECOND EXPRESSION

SELECT EMPNO,ENAME,SALARY,COMM,NVL2(COMM,SALARY+COMM,SALARY)FROM EMPLOYEE;


SELECT EMPNO,ENAME,SALARY,COMM,NVL2(TO_CHAR(COMM),TO_CHAR(COMM),'NOT APPLICABLE')FROM EMPLOYEE;


--NULLIF
--SYNTAX:-NULLIF(EXPRESSION1,EXPRESSION2)

--IT IS USED FOR COMPARISON
--RETURNS NULL IF BOTH EXPRESSIONS ARE EQUAL
--IF BOTH EXPRESSION ARE NOT EQUAL ,THAN IT WILL RETURN THE FIRST EXPRESSION

SELECT NULLIF(15,NULL)FROM DUAL;
SELECT NULLIF(15,15)FROM DUAL;


SELECT NULLIF(15,'FIFTEEN')FROM DUAL;


SELECT NULLIF(NULL,NULL)FROM DUAL;


SELECT NULLIF('SATURDAY','saturday')FROM DUAL;
SELECT NULLIF('SATURDAY','SATURDAY')FROM DUAL;


--COALESCE
--SYNTAX:- COALESCE(EXPRESSION1,EXPRESSION2,EXPRESSION3,EXPRESSION-N)
--IT CAN MULTIPLE ALTERNATIVES
--IT RETURNS THE FIRST NOT NULL VALUE
--THE DATA TYPE OF ALL THE EXPRESSION MUST BE SAME OTHERWISE IT WILL GENERATE AN ERROR

SELECT COALESCE(NULL,NULL,NULL,'GOOD MORNING',NULL,NULL,'GOOD NIGHT')FROM DUAL;


--IT WILL GENERATE AN ERROR
SELECT COALESCE(NULL,NULL,NULL,15,NULL,NULL,'GOOD NIGHT')FROM DUAL;


SELECT COALESCE(NULL,NULL,NULL,15,NULL,NULL,TO_NUMBER('GOOD NIGHT'))FROM DUAL;


--IF COMM IS NULL,SALARY IS TO BE PRINTED AND IF COMM IS NOT NULL THAN SALARY+COMM IS TO BE PRINTED

SELECT EMPNO,ENAME,SALARY,COMM,COALESCE(SALARY+COMM,SALARY)FROM EMPLOYEE;

--RANK FUNCTION

SELECT * FROM EMPLOYEE;
SELECT ENAME,JOB,SALARY,RANK()OVER(ORDER BY SALARY DESC)AS RANK FROM EMPLOYEE;


--RANK SHOULD NOT SKIP
SELECT ENAME,JOB,SALARY,DENSE_RANK()OVER(ORDER BY SALARY DESC)AS RANK FROM EMPLOYEE;


--RANK SHOULD NOT REPEAT
SELECT ENAME,JOB,SALARY,ROW_NUMBER()OVER(ORDER BY SALARY DESC)AS RANK FROM EMPLOYEE;


--DOING ALL TOGETHER
SELECT ENAME,JOB,SALARY,RANK()OVER(ORDER BY SALARY DESC)AS RANK,
						DENSE_RANK()OVER(ORDER BY SALARY DESC)AS DENSE_RANK,
						ROW_NUMBER()OVER(ORDER BY SALARY DESC)AS ROW_NUMBER 
FROM EMPLOYEE;


--DEPARTMENT WISE HIGHEST SALARY
SELECT ENAME,JOB,DEPTNO,SALARY,DENSE_RANK()OVER(PARTITION BY JOB ORDER BY SALARY DESC)
FROM EMPLOYEE;

EX_26_JOIN
DROP TABLE UNIVERSITY PURGE;
CREATE TABLE UNIVERSITY (
						 UNICODE VARCHAR2(6) PRIMARY KEY,
						 UNINAME VARCHAR2(30),
						 YEAR NUMBER(4),
						 CITY VARCHAR2(30)
)
;
INSERT INTO UNIVERSITY VALUES ('UNI001', 'ATMIYA UNIVERSITY',2018, 'RAJKOT')
;
INSERT INTO UNIVERSITY VALUES ('UNI002', 'SAURASHTRA UNIVERSITY',1965, 'RAJKOT')
;
INSERT INTO UNIVERSITY VALUES ('UNI003', 'GUJARAT UNIVERSITY',1955, 'AHMEDABAD')
;
INSERT INTO UNIVERSITY VALUES ('UNI004', 'GTU',2007, 'AHMEDABAD')
;
SELECT * FROM UNIVERSITY;

DROP TABLE COLLEGE9 PURGE;
CREATE TABLE COLLEGE9 (
						 COLCODE VARCHAR2(6) PRIMARY KEY,
						 COLNAME VARCHAR2(30),
						 CITY VARCHAR2(30),
						 UNICODE VARCHAR2(6) REFERENCES UNIVERSITY
)
;
INSERT INTO COLLEGE9 VALUES('COL001', 'VIRANI SCIENCE', 'RAJKOT','UNI001')
;
INSERT INTO COLLEGE9 VALUES('COL002', 'GYANYAGNA', 'RAJKOT','UNI001')
;
INSERT INTO COLLEGE9 VALUES('COL003', 'VICTORY', 'RAJKOT','UNI002')
;
INSERT INTO COLLEGE9 VALUES('COL004', 'AMBITION', 'AHMEDABAD','UNI003')
;
INSERT INTO COLLEGE9 VALUES('COL005', 'AMAZE', 'GANDHINAGAR','UNI002')
;
INSERT INTO COLLEGE9 VALUES('COL006', 'ENDEAVOUR', 'JUNAGADH', NULL)
;
SELECT * FROM COLLEGE9;


--JOIN
--BY DEFAULT CROSS JOIN 
--IT WILL RETURN ALL COLLEGES WITH EACH UNIVERSITY (24 RECORDS)

SELECT * FROM
COLLEGE9,UNIVERSITY
;


--COLLEGES AFFILIATED TO VARIOUS UNIVERSITY
--INNER JOIN
SELECT *
FROM COLLEGE9,UNIVERSITY
WHERE COLLEGE9.UNICODE=UNIVERSITY.UNICODE
;


--COLLEGES AFFILIATED TO VARIOUS UNIVERSITY (WITH COLLEGE NAME AND UNIVERSITY NAME ONLY)
SELECT COLNAME,UNINAME
FROM COLLEGE9,UNIVERSITY
WHERE COLLEGE9.UNICODE = UNIVERSITY.UNICODE
;

--COLLEGES AFFILIATED TO VARIOUS UNIVERSITIES (WITH COLLEGE NAME,UNICODE AND UNIVERSITY)
--AN ERROR MESSAGE : "COLUMN AMBIGUOUSLY DEFINED"
SELECT COLNAME,UNINAME,UNICODE
FROM COLLEGE9,UNIVERSITY
WHERE COLLEGE9.UNICODE = UNIVERSITY.UNICODE
;



--COLLEGE AND ITS AFFILIATED UNIVERSITY WITH UNICODE
SELECT UNINAME ,COLNAME ,C.UNICODE
FROM UNIVERSITY U INNER JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
;

--SAME(OUTPUT REMAIN SAME AS LIKE ABOVE)
SELECT UNINAME ,COLNAME ,C.UNICODE
FROM COLLEGE9 C INNER JOIN UNIVERSITY U ON (U.UNICODE=C.UNICODE)
;


--LEFT JOIN
--ALL THE UNIVERSITIES (WHETHER THERE IS ANY COLLEGE AFFILIATED OR NOT)
SELECT UNINAME ,COLNAME ,C.UNICODE
FROM UNIVERSITY U LEFT JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
;


--ALL THE UNIVERSITIES (WHETHER THERE IS ANY COLLEGE AFFILIATED UNIVERSITY OR NOT)
--ALL THE COLUMNS
SELECT *
FROM UNIVERSITY U LEFT JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
;


--RIGHT JOIN 
--ALL THE COLLEGES (WHETHER THERE IS ANY AFFILIATED UNIVERSITY OR NOT)
SELECT *
FROM UNIVERSITY U RIGHT JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
;

--FULL JOIN
--ALL THE UNIVERSITIES AND COLLEGES ,NO MATTER AFFILIATED OR NOT
SELECT *
FROM UNIVERSITY U FULL JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
;




--UNIVERSITY WHICH DOES NOT HAVE ANY COLLEGE AFFILIATED
SELECT *
FROM UNIVERSITY U FULL JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
WHERE COLCODE IS NULL
;


--COLLEGES AND UNIVERSITIES LOCATED IN THE CITY
SELECT * 
FROM UNIVERSITY U RIGHT JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
WHERE U.CITY = C.CITY
;


--COLLEGES AND UNIVERSITIES NOT LOCATED IN THE CITY
SELECT * 
FROM UNIVERSITY U RIGHT JOIN COLLEGE9 C ON (U.UNICODE=C.UNICODE)
WHERE U.CITY != C.CITY
;


EX_26_JOIN
--TABLE 1
DROP TABLE UNIVERSITY PURGE;
CREATE TABLE UNIVERSITY (
						 UNICODE VARCHAR2(6) PRIMARY KEY,
						 UNINAME VARCHAR2(30),
						 YEAR NUMBER(4),
						 CITY VARCHAR2(30)
)
;
INSERT INTO UNIVERSITY VALUES ('UNI001', 'ATMIYA UNIVERSITY',2018, 'RAJKOT')
;
INSERT INTO UNIVERSITY VALUES ('UNI002', 'SAURASHTRA UNIVERSITY',1965, 'RAJKOT')
;
INSERT INTO UNIVERSITY VALUES ('UNI003', 'GUJARAT UNIVERSITY',1955, 'AHMEDABAD')
;
INSERT INTO UNIVERSITY VALUES ('UNI004', 'GTU',2007, 'AHMEDABAD')
;
SELECT * FROM UNIVERSITY;

--TABLE 2
DROP TABLE COLLEGE9 PURGE;
CREATE TABLE COLLEGE9 (
						 COLCODE VARCHAR2(6) PRIMARY KEY,
						 COLNAME VARCHAR2(30),
						 CITY VARCHAR2(30),
						 UNICODE VARCHAR2(6) REFERENCES UNIVERSITY
)
;
INSERT INTO COLLEGE9 VALUES('COL001', 'VIRANI SCIENCE', 'RAJKOT','UNI001')
;
INSERT INTO COLLEGE9 VALUES('COL002', 'GYANYAGNA', 'RAJKOT','UNI001')
;
INSERT INTO COLLEGE9 VALUES('COL003', 'VICTORY', 'RAJKOT','UNI002')
;
INSERT INTO COLLEGE9 VALUES('COL004', 'AMBITION', 'AHMEDABAD','UNI003')
;
INSERT INTO COLLEGE9 VALUES('COL005', 'AMAZE', 'GANDHINAGAR','UNI002')
;
INSERT INTO COLLEGE9 VALUES('COL006', 'ENDEAVOUR', 'JUNAGADH', NULL)
;
SELECT * FROM COLLEGE9;

--TABLE 3
DROP TABLE STUDENT PURGE;
CREATE TABLE STUDENT9(
					 ROLLNO NUMBER(3) PRIMARY KEY,
					 NAME VARCHAR2(30),
					 CITY VARCHAR2(30),
					 COLCODE VARCHAR2(6) REFERENCES COLLEGE9
)
;
INSERT INTO STUDENT9 VALUES(101,'ABC','RAJKOT','COL001')
;
INSERT INTO STUDENT9 VALUES(102,'BCD','RAJKOT','COL002')
;
INSERT INTO STUDENT9 VALUES(103,'CDE','RAJKOT','COL003')
;
INSERT INTO STUDENT9 VALUES(104,'DEF','AHMEDABAD','COL004')
;
INSERT INTO STUDENT9 VALUES(105,'EFG','GANDHINAGAR','COL005')
;
INSERT INTO STUDENT9 VALUES(106,'FGH','JUNAGADH','COL006')
;
INSERT INTO STUDENT9 VALUES(107,'GHI','RAJKOT','COL001')
;
INSERT INTO STUDENT9 VALUES(108,'HIJ','AHMEDABAD','COL002')
;
INSERT INTO STUDENT9 VALUES(109,'IJK','GANDHINAGAR','COL003')
;
INSERT INTO STUDENT9 VALUES(110,'JKL','JUNAGADH','COL004')
;
SELECT* FROM STUDENT9;

--STUDENT NAME,COLLEGE NAME AND UNIVERSITY NAME
SELECT NAME,COLNAME,UNINAME
FROM STUDENT9 S INNER JOIN COLLEGE9 C ON (S.COLCODE=C.COLCODE) INNER JOIN UNIVERSITY U ON(C.UNICODE=U.UNICODE)
;


--STUDENT NAME,COLLEGE NAME AND UNIVERSITY NAME(OTHER WAY)
SELECT NAME,COLNAME,UNINAME
FROM STUDENT9 S ,COLLEGE9 C , UNIVERSITY U 
WHERE S.COLCODE =C.COLCODE AND U.UNICODE=C.UNICODE
;


--STUDENT , COLLEGE AND UNIVERSITY IN SAME CITY
SELECT NAME,COLNAME,UNINAME,S.CITY,C.CITY,U.CITY
FROM STUDENT9 S,COLLEGE9 C,UNIVERSITY U
WHERE S.COLCODE =C.COLCODE AND U.UNICODE=C.UNICODE AND S.CITY=C.CITY AND C.CITY=U.CITY
;


--COLLEGE AND UNIVERSITY WITHOUT AFFILIATION
SELECT * 
FROM COLLEGE9 C FULL JOIN UNIVERSITY U ON(C.UNICODE=U.UNICODE)
WHERE U.UNICODE IS NULL OR C.UNICODE IS NULL
;	


--COLLEGE WITHOUT AFFILIATION
SELECT * 
FROM COLLEGE9 C LEFT JOIN UNIVERSITY U ON(C.UNICODE=U.UNICODE)
WHERE U.UNICODE IS NULL OR C.UNICODE IS NULL
;


--UNIVERSITY WITHOUT AFFILIATION
SELECT * 
FROM COLLEGE9 C RIGHT JOIN UNIVERSITY U ON(C.UNICODE=U.UNICODE)
WHERE U.UNICODE IS NULL OR C.UNICODE IS NULL
;

 
DROP TABLE DEPARTMENT PURGE;
CREATE TABLE DEPARTMENT(
			DEPTNO NUMBER(3) PRIMARY KEY,
			DNAME VARCHAR2(20) NOT NULL,
			LOC VARCHAR2(20)
		CHECK (UPPER(LOC)IN('RAJKOT','AHMEDABAD','SURAT','VADODARA'))
)
;
INSERT INTO DEPARTMENT VALUES (10,'ACCOUNTING','RAJKOT')
;
INSERT INTO DEPARTMENT VALUES (20,'RESEARCH','AHMEDABAD')
;
INSERT INTO DEPARTMENT VALUES (30,'SALES','SURAT')
;
INSERT INTO DEPARTMENT VALUES (40,'OPERATIONS','VADODARA')
;
SELECT * FROM DEPARTMENT;
---------------------------------------------------------------------------------------------------------
DROP TABLE EMPLOYEES PURGE;
CREATE TABLE EMPLOYEES(
			EMPNO NUMBER(4) PRIMARY KEY,
			ENAME VARCHAR2(50) NOT NULL,
			JOB VARCHAR2(10),
			MGR NUMBER(4),
			BIRTHDATE DATE,
			HIREDATE DATE,
			SALARY NUMBER(6) DEFAULT 1000
			CHECK(SALARY>=100),
			COMM NUMBER(7,2),
			DEPTNO NUMBER(3)
			REFERENCES DEPARTMENT,
			CHECK(HIREDATE>=ADD_MONTHS(BIRTHDATE,12*21))
)
;
INSERT INTO EMPLOYEES VALUES (7369, 'ABHI','CLERK',7902, '10-MAR-80', '17-DEC-08',800 ,NULL,20)
;
INSERT INTO EMPLOYEES VALUES (7499, 'KABHI','SALESMAN',7698, '11-SEP-80', '20-FEB-03',1600 ,300,30)
;
INSERT INTO EMPLOYEES VALUES (7521, 'ANKIT','SALESMAN',7698, '27-APR-81', '22-FEB-03',1250,500,30)
;
INSERT INTO EMPLOYEES VALUES (7566,'DEVEN','MANAGER',7839,'24-JUN-81','02-APR-03',2975,NULL,20)
;
INSERT INTO EMPLOYEES VALUES (7654,'DHARMIK','SALESMAN',7698,'20-SEP-82','28-SEP-03',1250,1400,30)
;
INSERT INTO EMPLOYEES VALUES (7698,'CHARLIE','MANAGER',7839,'26-APR-82','01-MAY-03',2850,NULL,30)
;
INSERT INTO EMPLOYEES VALUES (7782,'HARIOM','MANAGER',7839,'25-MAY-83','09-JUN-04',2450,NULL,10)
;
INSERT INTO EMPLOYEES VALUES (7788,'TIRTH','ANALYST',7566,'28-MAR-87','19-APR-09 ',3000,NULL,20)
;
INSERT INTO EMPLOYEES VALUES (7839,'RAJA','PRESIDENT ',NULL,'20-NOV-81','17-NOV-03 ',5000,NULL,10)
;
INSERT INTO EMPLOYEES VALUES (7844,'KAMLESH','SALESMAN',7698,'19-OCT-81','08-SEP-03 ',1500,0,30)
;
INSERT INTO EMPLOYEES VALUES (7876,'ANIL','CLERK',7788,'21-MAY-86','23-MAY-09',1100,NULL,20)
;
INSERT INTO EMPLOYEES VALUES (7900,'RAMESH','CLERK',7698,'22-AUG-80','03-DEC-03',950,NULL,30)
;
INSERT INTO EMPLOYEES VALUES (7902,'NAMAN','ANALYST',7566,'19-NOV-82','03-DEC-03',3000,NULL,20)
;
INSERT INTO EMPLOYEES VALUES (7934,'SOHAN','CLERK',7782,'12-FEB-82','23-JAN-04',1300,NULL,10)
;

INSERT INTO EMPLOYEES (EMPNO,ENAME,SALARY) VALUES (1234,'HELLO',1000)
;
INSERT INTO EMPLOYEES (EMPNO,ENAME,SALARY) VALUES (1001,'HII',1000)
;
SELECT * FROM EMPLOYEES;

--EMPLOYEE NAME,JOB,DEPARTMENT NO,DEPARTMENT,CITY
SELECT ENAME,JOB,D.DEPTNO,DNAME,LOC
FROM EMPLOYEES E INNER JOIN DEPARTMENT D ON (E.DEPTNO=D.DEPTNO)
;


--EMPLOYEES WORKING IN RAJKOT
SELECT ENAME,LOC
FROM EMPLOYEES E INNER JOIN DEPARTMENT D ON(E.DEPTNO=D.DEPTNO)
WHERE D.LOC='RAJKOT'
;

--EMPLOYEE AND HIS DEPARTMENT
SELECT ENAME,D.DEPTNO,DNAME
FROM EMPLOYEES E INNER JOIN DEPARTMENT D ON(E.DEPTNO=D.DEPTNO)
;


--EMPLOYEES WITHOUT DEPARTMENT
SELECT ENAME,D.DEPTNO,DNAME
FROM EMPLOYEES E LEFT JOIN DEPARTMENT D ON(E.DEPTNO=D.DEPTNO)
WHERE DNAME IS NULL
;

--DEPARTMENT WITHOUT EMPLOYEES
SELECT ENAME,DNAME
FROM EMPLOYEE E RIGHT JOIN DEPARTMENT D ON (E.DEPTNO=D.DEPTNO)
WHERE EMPNO IS NULL
;


--DEPARTMENT WITHOUT EMPLOYEES AND EMPLOYEE WITHOUT DEPARTMENT
SELECT ENAME,DNAME
FROM EMPLOYEE E FULL JOIN DEPARTMENT D ON (E.DEPTNO=D.DEPTNO)
WHERE D.DEPTNO IS NULL OR E.EMPNO IS NULL
;


--SELF JOIN
--EMPLOYEES EARNING MORE THAN 'TIRTH'
SELECT T.ENAME,T.SALARY,O.ENAME,O.SALARY
FROM EMPLOYEES T,EMPLOYEES O
WHERE T.ENAME='TIRTH' AND T.SALARY<O.SALARYṢ
;

--EMPLOYEES HAVING SAME JOB AS TIRTH
SELECT T.ENAME,T.JOB,O.ENAME,O.JOB
FROM EMPLOYEES T,EMPLOYEES O
WHERE T.ENAME='TIRTH' AND T.JOB=O.JOB AND O.ENAME!='TIRTH'
;

DROP TABLE PROFILE PURGE;
CREATE TABLE PROFILE(
					 PID NUMBER(3),
					 NAME VARCHAR2(30),
					 GENDER VARCHAR2(6),
					 DEGREE VARCHAR2(20),
					 SALARY NUMBER(6),
					 STATE VARCHAR2(20)
)
;
INSERT INTO PROFILE VALUES(001, 'SOHAN', 'MALE', 'GRADUATE', 25000, 'GUJARAT')
;
INSERT INTO PROFILE VALUES(002, 'AASHVI', 'FEMALE', 'POST GRADUATE', 30000, 'GUJARAT')
;
INSERT INTO PROFILE VALUES(003, 'RAVI', 'MALE', 'PHD', 45000, 'GUJARAT')
;
INSERT INTO PROFILE VALUES(004, 'KIRAN', 'FEMALE', 'GRADUATE', 20000, 'MAHARASHTRA')
;
INSERT INTO PROFILE VALUES(005, 'AARAV', 'MALE', 'POST GRADUATE', 25000, 'MAHARASHTRA')
;
INSERT INTO PROFILE VALUES(006, 'AKHIL', 'MALE', 'PHD', 35000, 'MAHARASHTRA')
;
INSERT INTO PROFILE VALUES(007, 'ANIL', 'MALE', 'GRADUATE', 20000, 'RAJASTHAN')
;
INSERT INTO PROFILE VALUES(008, 'SARIKA', 'FEMALE', 'POST GRADUATE', 30000, 'RAJASTHAN')
;
INSERT INTO PROFILE VALUES(009, 'AJAY', 'MALE', 'PHD', 40000, 'RAJASTHAN')
;
INSERT INTO PROFILE VALUES(010, 'SHYLA', 'FEMALE', 'PHD', 45000, 'MADHYAPRADESH')
;



--GROUP FUNCTIONS 
--IF YOU DO NOT USE 'GROUP BY' THAN BY DEFAULT,WHOLE TABLE IS CONSIDERED AS A GROUP
SELECT COUNT(*) FROM EMPLOYEES;


SELECT COUNT(*),COUNT(JOB) FROM EMPLOYEES;


SELECT COUNT(*),COUNT(COMM) FROM EMPLOYEES;

SELECT COUNT(*),COUNT(DISTINCT(JOB)) FROM EMPLOYEES;

--LIST JOB WISE COUNT FROM EMPLOYEES
--THIS WILL GENERATE AN ERROR,'NOT A SINGLE GROUP' 
SELECT JOB,COUNT(*)
FROM EMPLOYEES;


SELECT JOB,COUNT(*)
FROM EMPLOYEES
GROUP BY JOB;



--LIST DEPTNO WISE COUNT OF EMPLOYEES
SELECT DEPTNO,COUNT(*)
FROM EMPLOYEES
GROUP BY DEPTNO;


--GENDER WISE COUNT
SELECT GENDER,COUNT(*)
FROM PROFILE
GROUP BY GENDER;


--DEGREE WISE COUNT
SELECT DEGREE,COUNT(*)
FROM PROFILE
GROUP BY DEGREE;



--DEGREE WISE COUNT AND GENDER WISE COUNT
SELECT DEGREE,GENDER,COUNT(*)
FROM PROFILE
GROUP BY DEGREE,GENDER;



--STATE WISE COUNT AND GENDER WISE COUNT
SELECT STATE,GENDER,COUNT(*)
FROM PROFILE
GROUP BY STATE,GENDER;


--USING HAVING CLAUSE
--GENDER WISE,STATE WISE COUNT EQUAL TO 2
SELECT STATE,GENDER,COUNT(*)
FROM PROFILE
GROUP BY STATE,GENDER
HAVING COUNT(*)=2;


--NUMBER OF EMPLOYEES,MINIMUM,MAXIMUM,AVERAGE AND SUM OF SALARY
SELECT COUNT(*),MIN(SALARY),MAX(SALARY),AVG(SALARY),SUM(SALARY)
FROM EMPLOYEES;


SELECT COUNT(*),MIN(SALARY),MAX(SALARY),AVG(SALARY),SUM(SALARY)
FROM PROFILE; 

--DEPARTMENT,NUMBER WISE NUMBER OF EMPLOYEES,MINIMUM,MAXIMUM,AVERAGE AND SUM OF SALARY
SELECT DEPTNO,COUNT(*),MIN(SALARY),MAX(SALARY),ROUND(AVG(SALARY)),SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPTNO; 


--DEPARTMENT NAME WISE NUMBER OF EMPLOYEES,MINIMUM,MAXIMUM,AVERAGE AND SUM OF SALARY
SELECT DNAME,COUNT(*),MIN(SALARY),MAX(SALARY),ROUND(AVG(SALARY)),SUM(SALARY)
FROM EMPLOYEES E ,DEPARTMENT D
WHERE E.DEPTNO = D.DEPTNO
GROUP BY DNAME; 



--DEPARTMENT NAME WISE NUMBER OF EMPLOYEES,MINIMUM,MAXIMUM,AVERAGE AND SUM OF SALARY
--SUM OF SALARY MUST BE MORE THAN 9000
SELECT DNAME,COUNT(*),MIN(SALARY),MAX(SALARY),ROUND(AVG(SALARY)),SUM(SALARY)
FROM EMPLOYEES E ,DEPARTMENT D
WHERE E.DEPTNO = D.DEPTNO
GROUP BY DNAME
HAVING SUM(SALARY)>9000;


--DEPARTMENT NAME WISE NUMBER OF EMPLOYEES,MINIMUM,MAXIMUM,AVERAGE AND SUM OF SALARY
--SUM OF SALARY MUST BE MORE THAN 9000
--SUM MUST BE RANKED WITH THE HEIGHEST SALARY FIRST
SELECT DNAME,COUNT(*),MIN(SALARY),MAX(SALARY),ROUND(AVG(SALARY)),SUM(SALARY) SS
FROM EMPLOYEES E ,DEPARTMENT D
WHERE E.DEPTNO = D.DEPTNO
GROUP BY DNAME
HAVING SUM(SALARY)>9000
ORDER BY SS DESC;


--BY DEFAULT NULL VALUES IS NOT CONSIDERED
SELECT COUNT(COMM) FROM EMPLOYEES;


SELECT AVG(COMM) FROM EMPLOYEES;





SELECT AVG(NVL(COMM,0)) FROM EMPLOYEES;


SELECT MIN(ENAME),MAX(ENAME) FROM EMPLOYEES;


SELECT MIN(BIRTHDATE),MAX(BIRTHDATE) FROM EMPLOYEES;









--SUBQUERY

--LIST EMPLOYEES WHOSE SALARY IS MORE THAN 'HARIOM'
--THERE ARE TWO WAYS TO SOLVE ABOVE QUERY
;*  --1) WE MAY WRITE FIRST,THE QUERY TO FIND THE SALARY OF 'HARIOM'
	AND THAN CAN COMPARE IT WITH OTHER EMPLOYEES SALARY
	--IT MEANS WE CAN WRITE 2 SEPARATE QUERY TO SOLVE 1 QUERY
--2) TO WRITE THE SUBQUERY*;
--EXPLORING OPTION 1
--FINDING SALARY OF 'HARIOM'
SELECT SALARY
FROM EMPLOYEES
WHERE ENAME = 'HARIOM';


--COMPARING WITH OTHER EMPLOYEES
SELECT * FROM EMPLOYEES
WHERE SALARY>2450;


--WRITING THE SUBQUERY TO SOLVE ABOVE QUERY
SELECT * FROM EMPLOYEES
WHERE SALARY>(SELECT SALARY FROM EMPLOYEES WHERE ENAME='HARIOM');


--LIST EMPLOYEES WHO HAVE SAME JOB AS 'ANKIT' AND SALARY MORE THAN 'EMPNO = 7844'
SELECT * FROM EMPLOYEES
WHERE JOB = (SELECT JOB FROM EMPLOYEES WHERE ENAME='ANKIT')AND
		SALARY>(SELECT SALARY FROM EMPLOYEES WHERE EMPNO=7844);



--USING GROUP FUNCTION IN A SUBQUERY
--FIND PERSON HAVING MINIMUM SALARY AND PERSON HAVING MAXIMUM SALARY
SELECT * FROM EMPLOYEES
WHERE SALARY = (SELECT MIN(SALARY)FROM EMPLOYEES)OR
		SALARY = (SELECT MAX(SALARY)FROM EMPLOYEES);


--USING HAVING CLAUSE IN SUBQUERY
--MINIMUM  SALARY OF DEPARTMENT , GREATER THAN DEPTNO = 20
SELECT DEPTNO ,MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPTNO;


SELECT DEPTNO,MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPTNO
HAVING MIN(SALARY)>(SELECT MIN(SALARY)FROM EMPLOYEES WHERE DEPTNO=20);


--MERGE
TABLE 1
DROP TABLE DETAIL PURGE;
CREATE TABLE DETAIL(
				    DID NUMBER(3) PRIMARY KEY,
				    NAME VARCHAR(30),
				    MOBILE NUMBER(10)
)
;
INSERT INTO DETAIL VALUES(001, 'ABC',9999999999)
;
INSERT INTO DETAIL VALUES(002, 'BCD',8888888888)
;
INSERT INTO DETAIL VALUES(003, 'CDE',7777777777)
;
TABLE 2
DROP TABLE DETAIL1 PURGE;
CREATE TABLE DETAIL1(
				    DID NUMBER(3) PRIMARY KEY,
				    NAME VARCHAR(30),
				    MOBILE NUMBER(10)
)
;
INSERT INTO DETAIL1 VALUES(001, 'A.B.C',8888888877)
;
INSERT INTO DETAIL1 VALUES(002, 'B.C.D',7777777777)
;
INSERT INTO DETAIL1 VALUES(004, 'C.D.E',6666666666)
;
INSERT INTO DETAIL1 VALUES(005, 'E.F.G',6666667777)
;


MERGE INTO DETAIL D 
	USING DETAIL1 D1
ON (D.DID=D1.DID)
	WHEN MATCHED THEN 
		UPDATE SET 
			D.NAME=D1.NAME,
			D.MOBILE=D1.MOBILE
	WHEN NOT MATCHED THEN
		INSERT VALUES (D1.DID,D1.NAME,D1.MOBILE);


SELECT * FROM DETAIL;

-- Union
CREATE VIEW POSSIBLE_UNIONS AS
SELECT EMPNO, ENAME FROM EMPLOYEES
UNION
SELECT PID AS EMPNO, NAME AS ENAME FROM PROFILE;

-- CREATE VIEW ANOTHER_UNION
CREATE VIEW ANOTHER_UNION AS
SELECT EMPNO, ENAME FROM EMPLOYEES
UNION
SELECT PID AS EMPNO, NAME AS ENAME FROM PROFILE
UNION
SELECT EMPNO, JOB AS ENAME FROM EMPLOYEES
WHERE JOB IS NOT NULL;

-- Create an index on EMPNO column
CREATE INDEX empno_index
ON EMPLOYEES(EMPNO);

-- Create an index on JOB and DEPTNO column
CREATE INDEX job_deptno_index
ON EMPLOYEES(JOB, DEPTNO);

-- Create an index on JOB column
CREATE INDEX job_index
ON EMPLOYEES(JOB);

-- Backup
BACKUP DATABASE ACMEDB 
 TO DISK = 'D:\Backups\ACMEBackupData.bak'
   WITH FORMAT;

-- RESTORE
RESTORE DATABASE ACMEDB
   FROM DISK = 'D:\Backups\ACMEBackupData.bak'